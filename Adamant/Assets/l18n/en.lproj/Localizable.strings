/* ApiService: Bad internal application error, report a bug. Using %@ as error description */
"AccountServiceError.InternalErrorFormat" = "Internal error: %@";

/* Login: user typed in invalid passphrase */
"AccountServiceError.InvalidPassphrase" = "Wrong passphrase";

/* Login: user not logged error */
"AccountServiceError.UserNotLogged" = "User not logged";

/* Login: user typed in wrong passphrase */
"AccountServiceError.WrongPassphrase" = "Wrong passphrase";

/* Account tab: Confirm logout alert: Logout (Ok) button */
"AccountTab.ConfirmLogout.Logout" = "Logout";

/* Account tab: Confirm logout alert */
"AccountTab.ConfirmLogout.MessageFormat" = "Logout from %@?";

/* Account atb: A full 'Get free tokens' link, with %@ as address */
"AccountTab.FreeTokens.UrlFormat" = "https://adamant.im/free-adm-tokens/?wallet=%@";

/* Account tab: A full 'Join ICO' link, with %@ as address */
"AccountTab.JoinIco.UrlFormat" = "https://adamant.im/ico/?wallet=%@";

/* Account tab: Balance row title */
"AccountTab.Row.Balance" = "Balance";

/* Account tab: 'Join the ICO' button */
"AccountTab.Row.JoinIco" = "Join the ICO";

/* Account tab: 'Logout' button */
"AccountTab.Row.Logout" = "Logout";

/* Account tab: 'Send tokens' button */
"AccountTab.Row.SendTokens" = "Send Tokens";

/* Account tab: 'Get free tokens' button */
"AccountTab.Row.FreeTokens" = "Free ADM tokens";

/* Account tab: Account section title. */
"AccountTab.Section.Account" = "Account";

/* Account tab: Actions section title */
"AccountTab.Section.Actions" = "Actions";

/* Account tab: Wallet section title */
"AccountTab.Section.Wallet" = "Wallet";

/* Account page: scene title */
"AccountTab.Title" = "Account";

/* Account tab: 'Transfer not allowed' alert 'go to WebApp button' */
"AccountTab.TransferBlocked.GoToPWA" = "msg.adamant.im";

/* Account tab: Inform user that sending tokens not allowed by Apple until the end of ICO */
"AccountTab.TransferBlocked.Message" = "Due to Apple restrictions, sending tokens is not allowed until the end of the ICO. For now, you can send tokens using WebApp at msg.adamant.im";

/* Account tab: 'Transfer not allowed' alert title */
"AccountTab.TransferBlocked.Title" = "Sorry!";

/* Product name */
"ADAMANT" = "ADAMANT";

/* ApiService: Account not found error. Using %@ for address. */
"ApiService.Error.AccountNotFoundFormat" = "Account not found: %@";

/* ApiService: Bad internal application error, report a bug. Using %@ for error description */
"ApiService.Error.InternalErrorFormat" = "Internal error: %@";

/* ApiService: No connection message. Generally bad network. */
"ApiService.Error.NoConnection" = "No connection to the Internet";

/* ApiService: Remote server returned an error. Using %@ for error description */
"ApiService.Error.RemoteServerErrorFormat" = "Blockchain Node error: %@";

/* ApiService: User not logged error */
"ApiService.Error.UserNotLogged" = "User not logged";

/* Serious internal error: Failed to build endpoint url */
"ApiService.InternalError.EndpointBuildFailed" = "Endpoint build failed. Report a bug";

/* Serious internal error: Failed to sign transaction */
"ApiService.InternalError.FailedTransactionSigning" = "Transaction failed";

/* Serious internal error: Error parsing response */
"ApiService.InternalError.ParsingFailed" = "Parsing failed. Report a bug";

/* Unknown internal error */
"ApiService.InternalError.UnknownError" = "Unknown error. Report a bug";

/* Eureka forms Cancel button */
"Cancel" = "Cancel";

/* ChatList: outgoing message preview format, like 'You: %@' */
"ChatListPage.SentMessageFormat" = "You: %@";

/* ChatList: scene title */
"ChatListPage.Title" = "Chats";

/* Known contacts: Adamant ICO message. Markdown supported. */
"Chats.IcoMessage" = "You have a possibility to **Join the ICO** of ADAMANT, the most secure and anonymous messenger. Learn more on Adamant.im website or in the Whitepaper.\n\nPlease make sure your have saved the passphrase to this account — exit your account and open it again. Better save your password on a sheet of paper also. But remember, only **you are responsible for the passphrase safety**. It cannot be recovered. And if other person will get it, your money will be stolen. Treat this question as secure, as if tokens in your wallet will cost a billion dollars some time.\n\nTo buy ADM tokens, go to Wallet tab and click Join the ICO, or open the page Adamant.im/ico/ in the web browser. In the ICO form enter your ADAMANT address — you will receive ADM tokens there. If you moved from Messenger App, your ADM address will be filled already, other way go back to Messenger and click ADAMANT address to copy it to clipboard. Next, choose crypto you want to spend and its amount. You'll see how much ADM tokens you will receive, including volume bonus: 20–30 ETH: +20%, 30–50 ETH: +30%, 50–90 ETH: +40%, 90+ ETH: +50%. Click Buy ADAMANT tokens. You'll get unique address where you need to send crypto. As soon as your transaction will be confirmed, you'll receive ADM tokens. Transaction can be done **from any wallet or exchange**. It is not necessary to transfer exact amount including transaction fees, the payment will be processed anyway.\nAfter you receive ADM tokens, we recommend to keep them as long as possible. All of unsold tokens during ICO will be distributed among users' wallets, adding 5% monthly. Additional info is on Adamant.im website and in the Whitepaper.\n\nDo not reply to this message, it is a system account. If you still have any questions, contact account **U15677078342684640219**";

/* Known contacts: Adamant pre ICO message */
"Chats.PreIcoMessage" = "You have a possibility to invest in ADAMANT, the most secure and anonymous messenger. Now is a Pre-ICO stage — the most profitable for investors. Learn more on Adamant.im website or in the Whitepaper. To participate just reply to this message and we will assist. We are eager to answer quickly, but sometimes delays for a couple of hours are possible.\nAfter you invest and receive ADM tokens, we recommend to keep them as long as possible. All of unsold tokens during ICO will be distributed among users wallets, adding 5% monthly. Additional info is on Adamant.im website and in the Whitepaper.";

/* Known contacts: Adamant welcome message. Markdown supported. */
"Chats.WelcomeMessage" = "Welcome to ADAMANT, the most secure and anonymous messenger. Remember, your security and anonymity is up to you also. Do not follow links you receive, otherwise your IP can be compromised. Do not trust browser extensions. Better to share your ADM address personally, but not using other messengers. Keep your secret passphrase secure. Set a password on your device or logout before leaving.\nLearn more about security and anonymity at https://adamant.im/staysecured.\nAll the transactions within the blockchain do need to have their minimal fees. This is necessary to support the network infrastructure. To start messengning now, **get free tokens** — go to Wallet tab and click Free ADM tokens. Then click Start new chat on Chats tab and put your interlocutor's address. To copy your address, click on ADAMANT address on Wallet tab.\nDo not reply to this message, it is a system account. If you still have any questions, contact account U15677078342684640219";

/* Alert 'Retry Or Delete' title. Used in caht for sending failed messages again or delete them */
"Chats.RetryOrDelete.Title" = "Retry or delete?";

/* Alert 'Retry Or Delete' body message. Used in caht for sending failed messages again or delete them */
"Chats.RetryOrDelete.Body" = "Do you whant to send message again or delete it?";

/* Chat: inform user that he can't cancel transaction, that was sent */
"ChatScene.Error.cancelError" = "Message already sended";

/* Chat: Notify user about bad internal error. Usually this should be reported as a bug. Using %@ for error description */
"ChatScene.Error.InternalErrorFormat" = "Internal error: %@. Report a bug";

/* Chat: Notify user that message cannot be empty */
"ChatScene.Error.MessageIsEmpty" = "Message is empty!";

/* Chat: Message is too long */
"ChatScene.Error.MessageTooLong" = "Message is too long";

/* Chat: Network problems. In most cases - no connection */
"ChatScene.Error.NoNetwork" = "No connection";

/* Chat: Notify user that he doesn't have money to pay a message fee */
"ChatScene.Error.NotEnoughMoney" = "You don't have enough money to send a message";

/* Chat: Notify user about server error. Using %@ for error description */
"ChatScene.Error.RemoteServerErrorFormat" = "Blockchain Node error: %@. Report a bug";

/* Chat: message input placeholder */
"ChatScene.NewMessage.Placeholder" = "New message";

/* Chat: Send message button */
"ChatScene.Send" = "Send";

/* Chat: 'Sent funds' bubble title */
"ChatScene.Sent" = "Sent";

/* Chat: 'Sent funds' buble 'Tap for details' tip */
"ChatScene.tapForDetails" = "Tap for details";

/* Error messge title for support email */
"Error.Mail.Title" = "I have error in my iOS app";

/* Error messge body for support email */
"Error.Mail.Body" = "Hello,\nI have this error:\n\n%@\n\nMy device info:\n%@";

/* Error messge body for support email, with detailed error description. Where first %@ - error's short message, second %@ - detailed description, third %@ - deviceInfo */
"Error.Mail.Body.Detailed" = "Hello,\nI have this error:\n\n%@\n\n%@\n\nDevice:\n%@";

/* Login: Notify user, that he disabled camera in settings, and need to authorize application. */
"LoginScene.Error.AuthorizeCamera" = "You need to authorize ADAMANT to use device's camera";

/* Login: User disabled access to photolibrary, he can authorize application in settings */
"LoginScene.Error.AuthorizePhotolibrary" = "You need to authorize ADAMANT to use your Photo library";

/* Login: No network error. */
"LoginScene.Error.NoInternet" = "No connection to the Internet";

/* Login: notify user that he is trying to login without a passphrase */
"LoginScene.Error.NoPassphrase" = "Enter a passphrase";

/* Login: Notify user that picked photo doesn't contains a valid qr code with passphrase */
"LoginScene.Error.NoQrOnPhoto" = "Selected image does not contain valid QR codes";

/* Login: Notify user that device not supported by QR reader */
"LoginScene.Error.QrNotSupported" = "QR code reading is not supported by the device";

/* Login: Notify user that scanned QR doesn't contains a passphrase. */
"LoginScene.Error.WrongQr" = "QR code does not contains a valid passphrase";

/* Login: notify user that we are trying to log in */
"LoginScene.LoggingInProgress" = "Logging in…";

/* Login: Login into previous account with biometry or pincode */
"LoginScene.LoginIntoAdamant" = "Login into ADAMANT";

/* Login: generate new passphrase button */
"LoginScene.Row.Generate" = "Generate new passphrase";

/* Login: Login button */
"LoginScene.Row.Login" = "Login";

/* Login: Passphrase placeholder */
"LoginScene.Row.Passphrase.Placeholder" = "Passphrase";

/* Login: Login with pincode button */
"LoginScene.Row.Pincode" = "Login with PIN code";

/* Login: Login with QR button. */
"LoginScene.Row.Qr" = "Login with QR code";

/* Login: security alert, notify user that he must save his new passphrase */
"LoginScene.Row.SavePassphraseAlert" = "Save the passphrase for new Wallet and Messenger account. There is no login to enter Wallet, only the passphrase needed. If lost, no way to recover it.";

/* Login: a small hint for a user, that he can tap on passphrase to save it */
"LoginScene.Row.TapToSave" = "Tap to save";

/* Login: login with existing passphrase section */
"LoginScene.Section.Login" = "Login";

/* Login: Create new account section */
"LoginScene.Section.NewAccount" = "New account";

/* New chat: Recipient address placeholder. Note that address text field always shows U letter, so you can left this line blank. */
"NewChatScene.Address.Placeholder" = "";

/* New chat: Notify user that specified address (%@) not found. Using %@ for address */
"NewChatScene.Error.AddressNotFoundFormat" = "Address not found: %@";

/* New chat: Notify user that he did enter invalid address */
"NewChatScene.Error.InvalidAddress" = "Enter a valid address";

/* New chat: Notify user that he can't start chat with himself */
"NewChatScene.Error.OwnAddress" = "You don't need an encrypted anonymous chat to talk to yourself";

/* New chat: Remote server returned an error. Using %@ for error description */
"NewChatScene.Error.RemoteServerFormat" = "Blockchain Node error: %@. Report a bug";

/* New Chat: Notify user that scanned QR doesn't contains an address */
"NewChatScene.Error.WrongQr" = "QR code does not contain a valid address";

/* New chat: Scan QR with address button */
"NewChatScene.ScanQr" = "Scan QR code";

/* New chat: scene title */
"NewChatScene.Title" = "New Chat";

/* Notifications: Modes description. Markdown supported. */
"Notifications.ModesDescription" = "#### Notification modes\n\n#### Disabled\nNo notifications.\n\n#### Background Fetch\nYour device fetchs for new messages by itself. No external calls. Fetch is initiated by iOS, the actual time determined by the operating system based on many factors like battery charge, cellular network, application usage patterns and cannot be predicted. This can be 20 minutes, or 6 hours, or maybe even a day. You still can open app and check for a new message though.\n\n#### Push\nNotifications sent to your device by ADAMANT Notification Service. You receive notification almost instantly after a message was sent and approved by the Blockchain - a few seconds delay. But this mode requires your device to register it's Device Token in the Service's database. Device tokens are safe and secure, and this option is recommended in most cases.\n\nYou can read more about device registration on ADAMANT's Github page.";

/* Notifications: Notifications update mode */
"Notifications.Section.Settings" = "Notifications settings";

/* Notifications: Selected notifications types */
"Notifications.Section.NotificationsType" = "Notifications";

/* Notifications: About ANS */
"Notifications.Section.AboutANS" = "About ANS";

/* Notifications: Disable notifications */
"Notifications.Mode.NotificationsDisabled" = "Disabled";

/* Notifications: Use Background fetch notifications */
"Notifications.Mode.BackgroundFetch" = "Background Fetch";

/* Notifications: Use Apple Push notifications */
"Notifications.Mode.ApplePush" = "Push";

/* Notifications: Visit Github */
"Notifications.Row.VisitGithub" = "Visit Github";

/* Notifications: Mode */
"Notifications.Row.Mode" = "Notifications mode";

/* Notifications: Send new messages notifications */
"Notifications.Row.Messages" = "Messages";

/* Notifications: Send new transfers notifications */
"Notifications.Row.Transfers" = "Transfers";

/* Notifications: Something went wrong while registering remote notifications. %@ for description */
"NotificationsService.Error.RegistrationRemotesFormat" = "Registration in ANS failed. Please, try again later. Reason %@";

/* Notifications: New message notification title */
"NotificationsService.NewMessage.Title" = "New Message";

/* Notifications: New single message notification body */
"NotificationsService.NewMessage.BodySingle" = "You have new message";

/* Notifications: New transfer transaction title */
"NotificationsService.NewTransfer.Title" = "New Transfer";

/* Notifications: New single transfer transaction body */
"NotificationsService.NewTransfer.BodySingle" = "You have new transfer";

/* Notifications: User has disabled notifications. Head him into settings */
"NotificationsService.NotificationsDisabled" = "Notifications disabled. You can enable notifications in Settings";

/* Pinpad: Ask user to create new pin */
"Pinpad.EnterNewPin" = "Enter new PIN code";

/* Pinpad: Ask user to repeat new pin */
"Pinpad.ReenterPin" = "Re-enter your PIN code";

/* QRGenerator: Bad Internal generator error message format. Using %@ for error description */
"QrGeneratorScene.Error.InternalErrorFormat" = "Internal error: %@. Report a bug";

/* QRGenerator: user typed in invalid passphrase */
"QrGeneratorScene.Error.InvalidPassphrase" = "Enter a valid passphrase";

/* QRGenerator: Passphrase textview placeholder */
"QrGeneratorScene.Passphrase.Placeholder" = "Passphrase";

/* QRGenerator: small 'Tap to save' tooltip under generated QR */
"QrGeneratorScene.TapToSave" = "Tap to save";

/* QRGenerator: scene title */
"QrGeneratorScene.Title" = "QR Generator";

/* Config: turn off 'Stay Logged In' confirmation */
"SettingsPage.DoNotStayLoggedIn" = "Do not stay logged in";

/* Config: Authorization reason for turning biometry off */
"SettingsPage.DoNotUseBiometry" = "Do not use biometry to log in";

/* Config: Generate QR with passphrase row */
"SettingsPage.Row.GenerateQr" = "Generate QR with passphrase";

/* Config: Show notifications */
"SettingsPage.Row.Notifications" = "Notifications";

/* Config: Stay logged option */
"SettingsPage.Row.StayLoggedIn" = "Stay logged in";

/* Config: Version row */
"SettingsPage.Row.Version" = "Version";

/* Config: Application Info section */
"SettingsPage.Section.ApplicationInfo" = "Application";

/* Config: Settings section */
"SettingsPage.Section.Settings" = "Settings";

/* Config: Utilities section */
"SettingsPage.Section.Utilities" = "Utilities";

/* Config: scene title */
"SettingsPage.Title" = "Settings";

/* Config: Authorization reason for turning biometry on */
"SettingsPage.UseBiometry" = "Use biometry";

/* Shared alert 'Cancel' button. Used anywhere */
"Shared.Cancel" = "Cancel";

/* Shared alert notification: message about item copied to pasteboard. */
"Shared.CopiedToPasteboard" = "Copied to Pasteboard!";

/* Shared alert 'Copy' button. Used anywhere. Used for copy-paste info. */
"Shared.CopyToPasteboard" = "Copy to Pasteboard";

/* Shared alert Done message. Used anywhere */
"Shared.Done" = "Done";

/* Shared alert 'Error' title. Used anywhere */
"Shared.Error" = "Error";

/* Shared alert 'Generate QR' button. Used to generate QR codes with addresses and passphrases. Used with sharing and saving, anywhere. */
"Shared.GenerateQRCode" = "Generate QR code";

/* Shared alert notification: title for no internet connection message. */
"Shared.NoInternet.Title" = "No internet connection";

/* Shared alert notification: body message for no internet connection. */
"Shared.NoInternet.Body" = "Please check your internet connection and try again";

/* Shared alert notification: title for Syncing. */
"Shared.SyncingMessage.Title" = "Syncing";

/* Shared alert notification: body message for Syncing. */
"Shared.SyncingMessage.Body" = "App is syncing data. Please wait.";

/* Shared alert 'Ok' button. Used anywhere */
"Shared.Ok" = "Ok";

/* Shared alert 'Save' button. Used anywhere */
"Shared.Save" = "Save";

/* Shared alert 'Save to Photos'. Used with saving images to photolibrary */
"Shared.SaveToPhotolibrary" = "Save to Photos";

/* Shared alert 'Settings' button. Used to go to system Settings app, on application settings page. Should be same as Settings application title. */
"Shared.Settings" = "Settings";

/* Shared alert 'Share' button. Used anywhere for presenting standart iOS 'Share' menu. */
"Shared.Share" = "Share";

/* Shared alert 'Retry' button. Used anywhere. */
"Shared.Retry" = "Retry";

/* Shared alert 'Delete' button. Used anywhere. */
"Shared.Delete" = "Delete";

/* ShareQR scene: User had not authorized access to write images to photolibrary */
"ShareQR.photolibraryNotAuthorized" = "You need to authorize ADAMANT to use your Photo library";

/* Main tab bar: Account page */
"Tabs.Account" = "Account";

/* Main tab bar: Chats page */
"Tabs.Chats" = "Chats";

/* Main tab bar: Settings page */
"Tabs.Settings" = "Settings";

/* TransactionList: scene title */
"TransactionListScene.Title" = "Transactions";

/* Transaction details: scene title */
"TransactionDetailsScene.Title" = "Details";

/* Transaction details: amount row. */
"TransactionDetailsScene.Row.Amount" = "Amount";

/* Transaction details: Block id row. */
"TransactionDetailsScene.Row.Block" = "Block";

/* Transaction details: confirmations row. */
"TransactionDetailsScene.Row.Confirmations" = "Confirmations";

/* Transaction details: date row. */
"TransactionDetailsScene.Row.Date" = "Date";

/* Transaction details: 'Open transaction in explorer' row. */
"TransactionDetailsScene.Row.Explorer" = "Open in Explorer";

/* Transaction details: fee row. */
"TransactionDetailsScene.Row.Fee" = "Fee";

/* Transaction details: sender row. */
"TransactionDetailsScene.Row.From" = "From";

/* Transaction details: Id row. */
"TransactionDetailsScene.Row.Id" = "Id";

/* Transaction details: recipient row. */
"TransactionDetailsScene.Row.To" = "To";

/* Export transaction: 'Share transaction summary' button */
"TransactionDetailsScene.Share.Summary" = "Summary";

/* Export transaction: 'Share transaction URL' button */
"TransactionDetailsScene.Share.URL" = "URL";

/* Transfer: transfer amount placeholder */
"TransferScene.Amount.Placeholder" = "to send";

/* Transfer: Address not found error */
"TransferScene.Error.AddressNotFound" = "Address not found";

/* Transfer: Address validation error */
"TransferScene.Error.InvalidAddress" = "Enter a valid address";

/* Transfer: Amount is hiegher that user's total money notification */
"TransferScene.Error.NotEnoughtMoney" = "You don't have that tokens";

/* Transfer: Amount is zero, or even negative notification */
"TransferScene.Error.TooLittleMoney" = "You should send more tokens";

/* Transfer: recipient address placeholder */
"TransferScene.Recipient.Placeholder" = "of the recipient";

/* Transfer: amount of adamant to transfer. */
"TransferScene.Row.Amount" = "Amount";

/* Transfer: logged user balance. */
"TransferScene.Row.Balance" = "Balance";

/* Transfer: maximum amount to transfer: available account money substracting transfer fee. */
"TransferScene.Row.MaxToTransfer" = "Max to transfer";

/* Transfer: recipient address */
"TransferScene.Row.Recipient" = "Address";

/* Transfer: Send button */
"TransferScene.Row.Send" = "Send";

/* Transfer: total amount of transaction: money to transfer adding fee */
"TransferScene.Row.Total" = "Total";

/* Transfer: transfer fee */
"TransferScene.Row.TransactionFee" = "Fee";

/* Transfer: 'Transfer info' section */
"TransferScene.Section.TransferInfo" = "Transfer Info";

/* Transfer: 'Your wallet' section */
"TransferScene.Section.YourWallet" = "Your Wallet";

/* Transfer: Confirm transfer alert: Send tokens button */
"TransferScene.Send" = "Send";

/* Transfer: Confirm transfer %1$@ tokens to %2$@ message. Note two variables: at runtime %1$@ will be amount (with ADM suffix), and %2$@ will be recipient address. You can use address before amount with this so called 'position tokens'. */
"TransferScene.SendConfirmFormat" = "Send %1$@ to %2$@?";

/* Transfer: Processing message */
"TransferScene.SendingFundsProgress" = "Sending tokens…";

/* Transfer: Tokens transfered successfully message */
"TransferScene.TransferSuccessMessage" = "Done!";

